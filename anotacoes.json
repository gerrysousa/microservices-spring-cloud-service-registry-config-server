https://github.com/gerrysousa/spring-cloud-service-registry-config.git

Curso de Microservices com Spring Cloud: Registry, Config Server e Distributed Tracing

==========================================================================================================================================================================
Faça esse curso de Java API e:
- Aprenda como funciona a decomposição do monólito
- Implemente o Service Discovery com Eureka
- Centralize as configurações com Spring Config Server
- Aumente a disponibilidade com Client-side Load Balancer
- Monitore e depure requisições com Distributed Tracing

==========================================================================================================================================================================
Aulas

Quebrando o domínio em serviços Ver primeiro vídeo
[ok	] - Introdução
[ok	] - Ambiente e versões
[ok	] - Conhecendo o domínio
[ok	] - Modelagem de microsserviços
[ok	] - Implementado o microsserviço
[ok	] - Para saber mais: Versões do Spring Cloud
[ok	] - Consolidando o seu conhecimento
[ok	] - O que aprendemos?

Service Registry com Eureka
[ok	] - Projeto da aula anterior
[ok	] - Usando o RestTemplate
[ok	] - Integração entre microsserviços
[ok	] - Implementando o serviço Fornecedor
[ok	] - Nível de acoplamento
[ok	] - Service Discovery com Eureka
[ok	] - Mudança com o uso do Service Discovery
[ok	] - Consolidando o seu conhecimento
[ok	] - O que aprendemos?

Spring Config Server
[ok	] - Projeto da aula anterior
[ok	] - Introdução ao Spring Config Server
[ok	] - Criando o servidor de configuração
[ok	] - Servidor de configuração
[ok	] - Acessando o servidor de configuração
[ok	] - Organização das configurações
[ok	] - Descobrindo as instâncias disponíveis
[ok	] - Migrando para o GitHub
[ok	] - Consolidando o seu conhecimento
[ok	] - O que aprendemos?

Load Balancer e Spring Feign
[ok	] - Projeto da aula anterior
[ok	] - Client Side Load Balancer
[ok	] - Load Balancing no cliente
[ok	] - Implementação com Spring Feign
[ok	] - Download do projeto a ser importado
[ok	] - Importando pedido e produtos
[	] - Consolidando o seu conhecimento
[	] - O que aprendemos?

Distributed Tracing e Spring Sleuth
[	] - Projeto da aula anterior
[	] - O que é Distributed Tracing?
[	] - Logs espalhados
[	] - Configurando o Papertrail
[	] - Agregação e Tracing
[	] - Adicionando Spring Sleuth
[	] - Consolidando o seu conhecimento
[	] - O que aprendemos?
[	] - Projeto do curso
[	] - Conclusão

==========================================================================================================================================================================
02 Ambiente e versões

Banco: MariaDB, 10.3.15 (HeidiSQL 9.5.0) https://mariadb.org/
Sprint-boot-started-parent: 2.1.5.release
spring-cloud: greenwich.sr1

Para subir o banco no docker basta executar o comando abaixo:
$ docker run --name mariadbcontainer -e MYSQL_ROOT_PASSWORD=mypass -p 3306:3306 -d docker.io/library/mariadb:10.3

Após o container já criado, basta executar o comando abaixo para inicia-lo:
$ docker start mariadbcontainer
O container do banco ficará disponivel, agora vc já pode conecter um SGBD client para acessar o banco, exemplo "MySQL Client".
Conecte pelo client e crie um novo schema, exemplo do curso "fornecedor"

==========================================================================================================================================================================
- Para saber mais: Versões do Spring Cloud
Comentamos mais de uma vez sobre as versões das bibliotecas que estamos utilizando. Todavia, chama a atenção que a versão do Spring Cloud tem também um nome associado que, no nosso caso, é a Greenwich.SR1. De acordo com o próprio site do Spring Cloud, esses nomes se referem a nomes de estações de metrô de Londres. As versões são lançadas respeitando a ordem alfabética, começando por Angel, seguindo por Brixton, Dalston, Edgware, Finchley, Greenwich (a mais legal, fisicamente falando) e, até o lançamento desse treinamento, a Hoxton.
==========================================================================================================================================================================
-O que aprendemos?
Nesta aula, vimos:

Qual a solução a ser implementada no curso
Teremos três microsserviços: Fornecedor, Loja e Transportador
Uma apresentação da modelagem focado em DDD (Domain Driven Design)
Quebraremos o domínio em contextos menores (bounded context)
Um microsserviço é a implementação de um contexto
O uso do Postman como cliente HTTP
A criação do microsserviço Loja usando Spring Boot
==========================================================================================================================================================================
-O que aprendemos?
Nesta aula, aprendemos:

A integração entre microsserviços com RestTemplate
O RestTemplate do Spring permite chamadas HTTP de alto nível
Um introdução ao Service discovery e Service registry
Service registry é um servidor central, onde todos os microsserviços ficam cadastrados (nome e IP/porta)
Service discovery é um mecanismo de descoberta do IP do microsserviço pelo nome
Dessa forma, nenhum microsserviço fica acoplado ao outro pelo IP/porta
A implementação do service registry através do Eureka Server
Como registrar da Loja e do Fornecedor no Eureka Server
A resolução do IP/porta através do nome do microsserviço nas requisições

==========================================================================================================================================================================
Esses funcionaran


REPO separado
server:
  port: 8888

spring:
  cloud:
    config:
      server:
        git:
          uri: https://github.com/gerrysousa/microservices-repo.git
          search-paths: fornecedor
          default-label: main
		  
-----

Esse no mesmo REPO
server:
  port: 8888

spring:
  cloud:
    config:
      server:
        git:
          uri: https://github.com/gerrysousa/spring-cloud-service-registry-config.git
          search-paths: microservices-repo
          default-label: main

==========================================================================================================================================================================
-O que aprendemos?
PRÓXIMA ATIVIDADE

Nesta aula, aprendemos:

- Que um servidor de configuração é o lugar central para definir as configurações dos serviços
- Que todas as configurações dos microsserviços devem ficar externalizadas e centralizadas
- Que o Spring Config Server é uma implementação do servidor do projeto Spring Cloud
- Sobre a integração dos microsserviços com o servidor de configuração
 	- Para tal, devemos configurar o nome do microsserviço, profile e URL do Config Server
- Que existem várias formas de definir um repositório de configurações, entre elas o GitHub

==========================================================================================================================================================================

package br.com.alura.microservice.loja.loja.service;

import br.com.alura.microservice.loja.loja.controller.dto.CompraDTO;
import br.com.alura.microservice.loja.loja.controller.dto.InfoFornecedorDTO;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.discovery.DiscoveryClient;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class CompraService {

  @Autowired
  private RestTemplate client;

  @Autowired
  private DiscoveryClient eurekaClient;

  public void realizarCompra(CompraDTO compra) {

    ResponseEntity<InfoFornecedorDTO> exchange =
        client.exchange(
            "http://fornecedor/info/" + compra.getEndereco().getEstado(),
            HttpMethod.GET,
        null,
            InfoFornecedorDTO.class);

    eurekaClient.getInstances("fornecedor").stream()
        .forEach(
            fornecedor -> {
              System.out.println( "localhost: "+fornecedor.getPort());
            });

    System.out.println( exchange.getBody().getEndereco());
  }
}


==========================================================================================================================================================================
-O que aprendemos?
PRÓXIMA ATIVIDADE

Nesta aula, aprendemos:

- Que o Client Side Load Balancing (CSLB) é o cliente HTTP que decide qual microsserviço recebe a requisição
	- Isto é importante, pois pode ter várias instâncias do mesmo serviço no ar
	- A configuração do CSLB é feita a partir da anotação @LoadBalanced, na criação do RestTemplate
	- Como implementação do CSLB, usamos um projeto chamado Ribbon, que faz parte do Spring Cloud Netflix
- Para descobrir quais clientes existem, podemos injetar a interface DiscoveryClient
- Como alternativa ao RestTemplate, podemos usar o Spring Feign, que já usa o Ribbon para CSLB
- O Spring Feign exige apenas uma interface, com a definição e mapeamento dos métodos que executarão a requisição
	- Toda a implementação da interface é gerada pelo Spring Feign

==========================================================================================================================================================================


==========================================================================================================================================================================


==========================================================================================================================================================================

